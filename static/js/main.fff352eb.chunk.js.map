{"version":3,"sources":["Components/landingpage.js","Components/resume.js","Components/jobexperience.js","Components/aboutme.js","Components/contactme.js","Components/project.js","Components/main.js","App.js","serviceWorker.js","index.js"],"names":["Landing","style","width","margin","className","col","src","alt","href","rel","target","class","aria-hidden","Component","Resume","Jobexperience","About","Contact","Project","Main","exact","path","component","LandingPage","App","title","scroll","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8NAqCeA,E,uKAhCP,OACI,yBAAKC,MAAO,CAACC,MAAM,OAAQC,OAAO,SAC9B,kBAAC,OAAD,CAAMC,UAAW,gBACb,kBAAC,OAAD,CAAMC,IAAK,IACR,yBAAKC,IAAI,+DAA+DC,IAAI,SAASH,UAAU,eAC/F,yBAAKA,UAAU,eACX,6CACA,6BACA,qGACC,yBAAKA,UAAU,gBAEf,uBAAGI,KAAK,0CAA0CC,IAAI,sBAAsBC,OAAO,UACnF,uBAAGC,MAAM,wBAAwBC,cAAY,UAI7C,uBAAGJ,KAAK,wCAAwCC,IAAI,sBAAsBC,OAAO,UACjF,uBAAGC,MAAM,eAAeC,cAAY,UAIpC,uBAAGJ,KAAK,oBAAoBC,IAAI,sBAAsBC,OAAO,UAC7D,uBAAGC,MAAM,gBAAgBC,cAAY,mB,GAxB3CC,aCMPC,E,uKALP,OACI,6BAAK,gD,GAHID,aCQLE,E,uKANR,OACI,6BAAK,wD,GAHWF,aCQbG,E,uKANP,OACI,6BAAK,kD,GAHGH,aCQLI,E,uKANP,OACI,6BAAK,oD,GAHKJ,aCOPK,E,uKALP,OACI,6BAAK,iD,GAHKL,aCiBPM,EAVF,kBACT,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,kBAAC,IAAD,CAAOF,KAAK,UAAUC,UAAWR,IACjC,kBAAC,IAAD,CAAOO,KAAK,SAASC,UAAWN,IAChC,kBAAC,IAAD,CAAOK,KAAK,WAAWC,UAAWJ,IAClC,kBAAC,IAAD,CAAOG,KAAK,WAAWC,UAAWL,IAClC,kBAAC,IAAD,CAAOI,KAAK,iBAAiBC,UAAWP,M,OCsBjCS,MA/Bf,WACE,OACE,yBAAKpB,UAAU,oBACf,kBAAC,SAAD,KACI,kBAAC,SAAD,CAAQA,UAAU,eAAeqB,MAAM,eAAeC,QAAM,GACxD,kBAAC,aAAD,KACI,kBAAC,IAAD,CAAMC,GAAI,UAAV,SACA,kBAAC,IAAD,CAAMA,GAAG,WAAT,UACA,kBAAC,IAAD,CAAMA,GAAI,kBAAV,iBACA,kBAAC,IAAD,CAAMA,GAAI,YAAV,WACA,kBAAC,IAAD,CAAMA,GAAI,YAAV,aAGR,kBAAC,SAAD,CAAQF,MAAM,gBACV,kBAAC,aAAD,KACI,kBAAC,IAAD,CAAME,GAAI,UAAV,SACA,kBAAC,IAAD,CAAMA,GAAG,WAAT,UACA,kBAAC,IAAD,CAAMA,GAAI,kBAAV,iBACA,kBAAC,IAAD,CAAMA,GAAI,YAAV,WACA,kBAAC,IAAD,CAAMA,GAAI,YAAV,aAGR,kBAAC,UAAD,KACI,yBAAKvB,UAAU,iBACf,kBAAC,EAAD,UCnBQwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,aCTNC,IAASC,OACP,kBAAC,IAAD,KACG,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.fff352eb.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport { Grid, Cell } from 'react-mdl';\r\n\r\nclass Landing extends Component{\r\n    render(){\r\n        return (\r\n            <div style={{width:'100%', margin:'auto' }}>\r\n                <Grid className= \"landing-grid\">\r\n                    <Cell col={12}>\r\n                       <img src=\"https://miro.medium.com/max/525/1*lyyXmbeoK5JiIBNCnzzjjg.png\" alt=\"Avatar\" className=\"avatar-img\" />                  \r\n                       <div className=\"banner-text\">\r\n                           <h1>Web Developer</h1>\r\n                           <hr/>\r\n                           <p>HTML/CSS | Bootstrap | JavaScript | React | NodeJS | Express | MongoDB</p>\r\n                            <div className=\"social-links\">\r\n                            {/* LinkedIn */}\r\n                            <a href=\"http://www.linkedin.com/in/zobeda-dewan\" rel=\"noopener noreferrer\" target=\"_blank\">\r\n                            <i class=\"fa fa-linkedin-square\" aria-hidden=\"true\"></i>\r\n                            </a>\r\n\r\n                            {/* Github */}\r\n                            <a href=\"http://https://github.com/zobedadewan\" rel=\"noopener noreferrer\" target=\"_blank\">\r\n                            <i class=\"fa fa-github\" aria-hidden=\"true\"></i>\r\n                            </a>\r\n\r\n                            {/* Youtube */}\r\n                            <a href=\"http://google.com\" rel=\"noopener noreferrer\" target=\"_blank\">\r\n                            <i class=\"fa fa-youtube\" aria-hidden=\"true\"></i>\r\n                            </a>\r\n                       </div>\r\n                       </div>\r\n                    </Cell>\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Landing;","import React, {Component} from 'react';\r\n\r\nclass Resume extends Component{\r\n    render(){\r\n        return (\r\n            <div><h1>Resume Page</h1></div>\r\n        )\r\n    }\r\n}\r\nexport default Resume;","import React, {Component} from 'react';\r\n\r\nclass Jobexperience extends Component{\r\n    render(){\r\n        return (\r\n            <div><h1>Job Experience Page</h1></div>\r\n        )\r\n    }\r\n}\r\n\r\n export default Jobexperience;","import React, {Component} from 'react';\r\n\r\nclass About extends Component{\r\n    render(){\r\n        return (\r\n            <div><h1>About Me Page</h1></div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default About;","import React, {Component} from 'react';\r\n\r\nclass Contact extends Component{\r\n    render(){\r\n        return (\r\n            <div><h1>Contact Me Page</h1></div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Contact;","import React, {Component} from 'react';\r\n\r\nclass Project extends Component{\r\n    render(){\r\n        return (\r\n            <div><h1>Project page</h1></div>\r\n        )\r\n    }\r\n}\r\nexport default Project;","import React, {Component} from 'react';\r\nimport {Switch, Route} from 'react-router-dom';\r\nimport LandingPage from './landingpage';\r\nimport Resume from './resume';\r\nimport Jobexperience from './jobexperience';\r\nimport About from './aboutme';\r\nimport Contact from './contactme';\r\nimport Project from './project';\r\n\r\nconst Main = () => (\r\n    <Switch>\r\n        <Route exact path=\"/\" component={LandingPage} />\r\n        <Route path=\"/resume\" component={Resume} />\r\n        <Route path=\"/about\" component={About} />\r\n        <Route path=\"/project\" component={Project} />\r\n        <Route path=\"/contact\" component={Contact}/>\r\n        <Route path=\"/jobexperience\" component={Jobexperience}/>\r\n    </Switch>\r\n) \r\nexport default Main;\r\n\r\n","import React from 'react';\nimport './App.css';\nimport { Layout, Header, Navigation, Drawer, Content } from 'react-mdl';\nimport Main from './Components/main';\nimport {Link} from 'react-router-dom';\n\n\nfunction App() {\n  return (\n    <div className=\"demo-big-content\">\n    <Layout>\n        <Header className=\"header-color\" title=\"Zobeda Dewan\" scroll>\n            <Navigation>\n                <Link to= \"/about\">About</Link>\n                <Link to=\"/resume\">Resume</Link>\n                <Link to= \"/jobexperience\">Jobexperience</Link>\n                <Link to= \"/project\">Project</Link>\n                <Link to =\"/contact\">Contact</Link>\n            </Navigation>\n        </Header>\n        <Drawer title=\"Zobeda Dewan\">\n            <Navigation>\n                <Link to= \"/about\">About</Link>\n                <Link to=\"/resume\">Resume</Link>\n                <Link to= \"/jobexperience\">Jobexperience</Link>\n                <Link to= \"/project\">Project</Link>\n                <Link to =\"/contact\">Contact</Link>\n            </Navigation>\n        </Drawer>\n        <Content>\n            <div className=\"page-content\" />\n            <Main/>\n        </Content>\n    </Layout>\n</div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n     <App />\n  </BrowserRouter>\n  ,document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}